{"code":"public static void putShortLE(byte[] arr,long off,short val){\n  if (UNALIGNED)   UNSAFE.putShort(arr,off,Short.reverseBytes(val));\n else   putShortByByte(arr,off,val,false);\n}","nl":"Stores short value into byte array assuming that value should be stored in little-endian byte order and native byte order is big-endian.","sequence":"( MethodDeclaration ( Modifier_public ) Modifier_public ( Modifier_static ) Modifier_static ( PrimitiveType ) PrimitiveType ( SimpleName_putShortLE ) SimpleName_putShortLE ( SingleVariableDeclaration ( ArrayType ( PrimitiveType ) PrimitiveType ( Dimension ) Dimension ) ArrayType ( SimpleName_arr ) SimpleName_arr ) SingleVariableDeclaration ( SingleVariableDeclaration ( PrimitiveType ) PrimitiveType ( SimpleName_off ) SimpleName_off ) SingleVariableDeclaration ( SingleVariableDeclaration ( PrimitiveType ) PrimitiveType ( SimpleName_val ) SimpleName_val ) SingleVariableDeclaration ( Block ( IfStatement ( SimpleName_UNALIGNED ) SimpleName_UNALIGNED ( ExpressionStatement ( MethodInvocation ( SimpleName_UNSAFE ) SimpleName_UNSAFE ( SimpleName_putShort ) SimpleName_putShort ( SimpleName_arr ) SimpleName_arr ( SimpleName_off ) SimpleName_off ( MethodInvocation ( SimpleName_Short ) SimpleName_Short ( SimpleName_reverseBytes ) SimpleName_reverseBytes ( SimpleName_val ) SimpleName_val ) MethodInvocation ) MethodInvocation ) ExpressionStatement ( ExpressionStatement ( MethodInvocation ( SimpleName_putShortByByte ) SimpleName_putShortByByte ( SimpleName_arr ) SimpleName_arr ( SimpleName_off ) SimpleName_off ( SimpleName_val ) SimpleName_val ( BooleanLiteral_false ) BooleanLiteral_false ) MethodInvocation ) ExpressionStatement ) IfStatement ) Block ) MethodDeclaration "}
{"code":"private void showFeedback(String message){\n  if (myHost != null) {\n    myHost.showFeedback(message);\n  }\n else {\n    System.out.println(message);\n  }\n}","nl":"Used to communicate feedback pop-up messages between a plugin tool and the main Whitebox user-interface.","sequence":"( MethodDeclaration ( Modifier_private ) Modifier_private ( PrimitiveType ) PrimitiveType ( SimpleName_showFeedback ) SimpleName_showFeedback ( SingleVariableDeclaration ( SimpleType ( SimpleName_String ) SimpleName_String ) SimpleType ( SimpleName_message ) SimpleName_message ) SingleVariableDeclaration ( Block ( IfStatement ( InfixExpression ( SimpleName_myHost ) SimpleName_myHost ( NullLiteral_null ) NullLiteral_null ) InfixExpression ( Block ( ExpressionStatement ( MethodInvocation ( SimpleName_myHost ) SimpleName_myHost ( SimpleName_showFeedback ) SimpleName_showFeedback ( SimpleName_message ) SimpleName_message ) MethodInvocation ) ExpressionStatement ) Block ( Block ( ExpressionStatement ( MethodInvocation ( QualifiedName ( SimpleName_System ) SimpleName_System ( SimpleName_out ) SimpleName_out ) QualifiedName ( SimpleName_println ) SimpleName_println ( SimpleName_message ) SimpleName_message ) MethodInvocation ) ExpressionStatement ) Block ) IfStatement ) Block ) MethodDeclaration "}
{"code":"public void clearParsers(){\n  if (parserManager != null) {\n    parserManager.clearParsers();\n  }\n}","nl":"Removes all parsers from this text area.","sequence":"( MethodDeclaration ( Modifier_public ) Modifier_public ( PrimitiveType ) PrimitiveType ( SimpleName_clearParsers ) SimpleName_clearParsers ( Block ( IfStatement ( InfixExpression ( SimpleName_parserManager ) SimpleName_parserManager ( NullLiteral_null ) NullLiteral_null ) InfixExpression ( Block ( ExpressionStatement ( MethodInvocation ( SimpleName_parserManager ) SimpleName_parserManager ( SimpleName_clearParsers ) SimpleName_clearParsers ) MethodInvocation ) ExpressionStatement ) Block ) IfStatement ) Block ) MethodDeclaration "}
{"code":"public static CstFloat make(int bits){\n  return new CstFloat(bits);\n}","nl":"Makes an instance for the given value.","sequence":"( MethodDeclaration ( Modifier_public ) Modifier_public ( Modifier_static ) Modifier_static ( SimpleType ( SimpleName_CstFloat ) SimpleName_CstFloat ) SimpleType ( SimpleName_make ) SimpleName_make ( SingleVariableDeclaration ( PrimitiveType ) PrimitiveType ( SimpleName_bits ) SimpleName_bits ) SingleVariableDeclaration ( Block ( ReturnStatement ( ClassInstanceCreation ( SimpleType ( SimpleName_CstFloat ) SimpleName_CstFloat ) SimpleType ( SimpleName_bits ) SimpleName_bits ) ClassInstanceCreation ) ReturnStatement ) Block ) MethodDeclaration "}
{"code":"public long size(){\n  long size=0;\n  if (parsedGeneExpressions == null)   parseGenes();\n  for (int i=0; i < parsedGeneExpressions.length; i++)   size+=parsedGeneExpressions[i].numberOfNodes();\n  return size;\n}","nl":"Returns the \"size\" of the chromosome, namely, the number of nodes in all of its parsed genes -- does not include the linking functions.","sequence":"( MethodDeclaration ( Modifier_public ) Modifier_public ( PrimitiveType ) PrimitiveType ( SimpleName_size ) SimpleName_size ( Block ( VariableDeclarationStatement ( PrimitiveType ) PrimitiveType ( VariableDeclarationFragment ( SimpleName_size ) SimpleName_size ( NumberLiteral_0 ) NumberLiteral_0 ) VariableDeclarationFragment ) VariableDeclarationStatement ( IfStatement ( InfixExpression ( SimpleName_parsedGeneExpressions ) SimpleName_parsedGeneExpressions ( NullLiteral_null ) NullLiteral_null ) InfixExpression ( ExpressionStatement ( MethodInvocation ( SimpleName_parseGenes ) SimpleName_parseGenes ) MethodInvocation ) ExpressionStatement ) IfStatement ( ForStatement ( VariableDeclarationExpression ( PrimitiveType ) PrimitiveType ( VariableDeclarationFragment ( SimpleName_i ) SimpleName_i ( NumberLiteral_0 ) NumberLiteral_0 ) VariableDeclarationFragment ) VariableDeclarationExpression ( InfixExpression ( SimpleName_i ) SimpleName_i ( QualifiedName ( SimpleName_parsedGeneExpressions ) SimpleName_parsedGeneExpressions ( SimpleName_length ) SimpleName_length ) QualifiedName ) InfixExpression ( PostfixExpression ( SimpleName_i ) SimpleName_i ) PostfixExpression ( ExpressionStatement ( Assignment ( SimpleName_size ) SimpleName_size ( MethodInvocation ( ArrayAccess ( SimpleName_parsedGeneExpressions ) SimpleName_parsedGeneExpressions ( SimpleName_i ) SimpleName_i ) ArrayAccess ( SimpleName_numberOfNodes ) SimpleName_numberOfNodes ) MethodInvocation ) Assignment ) ExpressionStatement ) ForStatement ( ReturnStatement ( SimpleName_size ) SimpleName_size ) ReturnStatement ) Block ) MethodDeclaration "}
